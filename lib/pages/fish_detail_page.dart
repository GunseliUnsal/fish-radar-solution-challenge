import 'package:cached_network_image/cached_network_image.dart';
import 'package:fish_radar/constants/colors.dart';
import 'package:fish_radar/demos/text_shimmer.dart';
import 'package:flutter/material.dart';
import 'package:flutter_widget_from_html/flutter_widget_from_html.dart';
import 'fish_card.dart';
import 'package:google_gemini/google_gemini.dart';

class FishDetailPage extends StatefulWidget {
  final FishCard fishCard;
  FishDetailPage({Key? key, required this.fishCard}) : super(key: key);

  @override
  _FishDetailPageState createState() => _FishDetailPageState();
}

class _FishDetailPageState extends State<FishDetailPage> {
  bool isGeminiTextGenerated = false;
  late String generatedGeminiText;
  final gemini =
      GoogleGemini(apiKey: "AIzaSyCFWOYBH2LATmCEkwLAFbnzRJnm5AtS6Ko");

  final byGemini =
      """<p style = "text-align: center; font-style: italic;">generated by <a href="https://deepmind.google/technologies/gemini/#introduction">gemini</a></p>""";

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    generateGeminiText();
  }

  void generateGeminiText() {
    gemini
        .generateFromText(
            "Give detailed and regular information about ${widget.fishCard.name} fish, JUST return all answer html body format.")
        .then((value) {
      setState(() {
        generatedGeminiText = value.text.replaceAll("```html", "");
        isGeminiTextGenerated = true;
        print(value.text);
      });
    }).catchError((e) => print(e));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Stack(
              children: [
                Container(
                  decoration: BoxDecoration(
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.2),
                        spreadRadius: 2,
                        blurRadius: 5,
                        offset: Offset(0, 2),
                      ),
                    ],
                  ),
                  child: ClipRRect(
                    borderRadius: const BorderRadius.only(
                      bottomLeft: Radius.circular(20.0),
                      bottomRight: Radius.circular(20.0),
                    ),
                    child: CachedNetworkImage(
                      colorBlendMode: BlendMode.darken,
                      alignment: Alignment.topRight,
                      fadeInCurve: Curves.easeIn,
                      imageUrl: widget.fishCard.imageURL,
                      placeholder: (context, url) => Image.asset(
                        "assets/png/placeholder.png",
                        fit: BoxFit.fitWidth,
                      ),
                      errorWidget: (context, url, error) => Image.asset(
                        "assets/png/placeholder.png",
                        fit: BoxFit.fitWidth,
                      ),
                      height: 350,
                      width: double.infinity,
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.only(top: 44, left: 8),
                  child: IconButton(
                    color: Colors.white.withOpacity(0.2),
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    icon: Icon(
                      Icons.arrow_back,
                      color: Colors.white.withOpacity(0.7),
                      size: 30,
                    ),
                  ),
                )
              ],
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                widget.fishCard.name,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 26,
                  fontWeight: FontWeight.w300,
                  fontStyle: FontStyle.italic,
                ),
                textAlign: TextAlign.left,
              ),
            ),
            Container(
              width: double.infinity,
              height: 1,
              color: Colors.grey.withOpacity(0.2),
            ),
            if (isGeminiTextGenerated)
              Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: HtmlWidget(
                    generatedGeminiText + byGemini,
                    textStyle: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.normal,
                      fontStyle: FontStyle.normal,
                    ),
                  ))
            else
              ShimmerColumnWidget(),
          ],
        ),
      ),
    );
  }
}
